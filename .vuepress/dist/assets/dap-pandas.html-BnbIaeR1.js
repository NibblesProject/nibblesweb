import{_ as p,r as o,o as l,c,b as s,d as n,e as t,a as e}from"./app-DFYi-PFb.js";const i="/uploads/2023/06/2024070710204024.png",u="/uploads/2023/05/%E6%95%B0%E6%8D%AE%E7%BB%B4%E5%BA%A6-1024x441.png",d="/uploads/2023/05/T1-1024x339.png",r="/uploads/2023/05/T2-1024x606.png",k="/uploads/2023/06/table.png",h={},m=e('<h1 id="python数据分析-i-pandas模块" tabindex="-1"><a class="header-anchor" href="#python数据分析-i-pandas模块"><span>Python数据分析 Ⅰ：pandas模块</span></a></h1><p>Data Analysis in Python : pandas module</p><p><img src="'+i+'" alt="img"></p><h2 id="与excel处理区别" tabindex="-1"><a class="header-anchor" href="#与excel处理区别"><span>与Excel处理区别</span></a></h2><p>pandas模块主要用于数据的处理与分析，其提供的大量处理数据的函数和方法，能方便操作大型数据集。而Excel适用于小数据样本，且较为单一的功能需求。</p><h2 id="数据维度区分" tabindex="-1"><a class="header-anchor" href="#数据维度区分"><span>数据维度区分</span></a></h2><p><img src="'+u+'" alt="img">以上在Python中以<strong>列表或嵌套列表</strong>的形式实现</p><p>在pandas模块中主要的数据结构为<strong>Series</strong>（一维结构）和<strong>DataFrame</strong>（二维表）</p><h2 id="模块安装与引入" tabindex="-1"><a class="header-anchor" href="#模块安装与引入"><span>模块安装与引入</span></a></h2><p>最简单的方法即为下载<strong>Anaconda开发套件</strong>，这里面几乎集成安装了教材中能用到的所有模块！在未来会发布有关Anaconda的使用配置教程：</p>',10),g={href:"https://www.anaconda.com/download",target:"_blank",rel:"noopener noreferrer"},v=s("strong",null,"pip命令安装",-1),b={href:"https://pypi.org/",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>进入C盘的用户文件夹中的AppData\\Roaming\\pip目录，看到pip.ini内容，改为：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token punctuation">[</span>global<span class="token punctuation">]</span></span>
<span class="line">index-url <span class="token operator">=</span> https://mirrors.aliyun.com/pypi/simple/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>打开cmd，输入以下代码开始安装</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">pip <span class="token function">install</span> pandas</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>pip方式，会默认帮你安装一些 NumPy 等其他可以搭配的包</p><p>进入shell解释器，输入 <code>import pandas</code> 引入模块语句（文件中的引入也应为此语句）。若已安装则不会返回任何提示，未安装会报 <code>ModuleNotFoundError</code></p><p>在后文中我们使用如下引用约定（后文中引用模块时将会简写为as后的pd）</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="series数据结构" tabindex="-1"><a class="header-anchor" href="#series数据结构"><span>Series数据结构</span></a></h2><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h3><p>可以以列表和字典的形式形式创建，并以<code>print()</code>函数输出。输出中未指定索引index时<strong>默认为0起递增的整数</strong>。</p><p>并包含dtype说明对象类型（下例中为object，常见的还有int64、float64等） 列表中元素若有int和float交杂，则全部会转化为float；若存在字符串将会为object</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s1<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>后多加一列表可指定索引（<code>index=</code>可以不加默认后一列表为索引），请注意<strong>前后列表元素的对应</strong>（即<strong>长度相同</strong>）。否则会报 <code>ValueError : Length of values (&lt;值元素长度&gt;) does not match length of index (&lt;索引元素长度&gt;)</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s2<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;O&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;U&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当用字典创建时，它的键（key）会作为 index，值（values）为 data。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s3<span class="token operator">=</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;O&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;U&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h3><p>以s2为例，分别输出index和values的值</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>index<span class="token punctuation">)</span>   <span class="token comment">#运行结果：Index([&#39;H&#39;, &#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39;U&#39;, &#39;S&#39;], dtype=&#39;object&#39;)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>values<span class="token punctuation">)</span>  <span class="token comment">#运行结果：[&#39;N&#39; &#39;I&#39; &#39;B&#39; &#39;B&#39; &#39;L&#39; &#39;E&#39; &#39;S&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>亦可以通过遍历输出（默认）values值。为了不使其自动按行输出，修改了end属性为空字符串</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> s2<span class="token punctuation">:</span>  <span class="token comment">#默认输出values</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的可以修改s2为s2.index实现对索引的遍历</p><p>可以通过索引方式对其中的values查找操作，可以使用定义后的index或者默认index</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果索引相同的两个呢？</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果将会输出由index均为L的values组成的Series，同样会返回dtype</p><p>可以使用切片方式，但是需要注意区分<strong>使用指定索引和未指定索引时左右界</strong>能否取到的区别</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">#遵循正常左开右闭的原则</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;O&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#index为E到O的均可以取到，则左右均闭</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="筛选" tabindex="-1"><a class="header-anchor" href="#筛选"><span>筛选</span></a></h3><p>筛选values为B的部分数据。注意中间的等于为判断操作，应当为<strong>双等号</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>s2<span class="token operator">==</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="dataframe数据结构" tabindex="-1"><a class="header-anchor" href="#dataframe数据结构"><span>DataFrame数据结构</span></a></h2><p>DataFrame是一种类似于关系表的表格型数据结构。DataFrame对象是一个二维表格, 其中每列中的元素类型必须一致，而不同的列可以拥有不同的元素类型。可以看作共享同一index的多个Series的集合。</p><h3 id="创建-1" tabindex="-1"><a class="header-anchor" href="#创建-1"><span>创建</span></a></h3><p>同样的可以以嵌套列表和字典的形式形式创建，并以<code>print()</code>函数输出。输出中未指定index或columns时<strong>默认为0起递增的整数</strong>。不过相较于Series，DateFrame多了一个columns参数，输出时即为列标题</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;王静怡&quot;</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;张佳妮&quot;</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;李臣武&quot;</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">df1<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;信息分数&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样输出时有dtype说明数据类型，同样也可以指定index。</p><p>index注意需要与外列表长度对应，columns注意需要与内列表长度对应。</p><p>同样地，用字典创建时，它的键（key）会作为 index，值（values）为 data。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;学号&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;01&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;02&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;03&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;04&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;05&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;06&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;00&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;姓名&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;小李&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李华&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;缺考&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;班级&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;语文&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;数学&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment">#此处换行仅为了可读性与代码的美观</span></span>
<span class="line">df2<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问-1" tabindex="-1"><a class="header-anchor" href="#访问-1"><span>访问</span></a></h3><p>以df2为例，同样的分别输出columns和values。若指定了index则也可输出对应值。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>columns<span class="token punctuation">)</span> <span class="token comment">#输出：Index([&#39;学号&#39;, &#39;姓名&#39;, &#39;语文&#39;, &#39;数学&#39;], dtype=&#39;object&#39;)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>values<span class="token punctuation">)</span>  <span class="token comment">#输出即为一个由每行数据组成的嵌套列表</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果为默认索引值将会输出其Range范围（如<code>RangeIndex(start=0, stop=6, step=1)</code>）</p><p>同样也可以使用遍历输出index和（默认）columns，values输出将会是多个由每行数据组成的单列表</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> df2<span class="token punctuation">.</span>index<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> df2<span class="token punctuation">:</span>     <span class="token comment">#默认输出columns</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> df2<span class="token punctuation">.</span>values<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用索引方式对一列数据的输出，返回由该列数据与对应columns和index组成的Series对象。以下为两种均可使用的索引方式</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">[</span><span class="token string">&quot;学号&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>学号<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如何输出多列数据呢？可以使用列表并其中包含columns值来实现输出（但输出非Series对象）</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;学号&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出行数据需要使用切片操作，其范围为index。若指定index则左右均闭。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们还可以通过内置的函数实现对前2行（head）和后2行（tail）的选取，返回Series对象</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>head<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>tail<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>若需要对单个数据的访问可以使用at或者两次索引的方式。注意<strong>先后顺序</strong>：at后列表中共两个值，前为index，后为columns。而两次索引应当先对列索引后对行索引。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">[</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改DataFrame对象中单一数据只能用两次索引方式，其实质仍为变量的赋值操作。但是如果索引值被整型数字修改了，那么将只能使用规定的索引值访问。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">df1<span class="token punctuation">[</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;wangjingyi&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="筛选-1" tabindex="-1"><a class="header-anchor" href="#筛选-1"><span>筛选</span></a></h3><p>筛选找到语文成绩大于90分的同学数据，输出非仅仅只有语文数据，而是其他数据均有伴随着输出。注意中间的等于为判断操作，应当为<strong>双等号</strong>。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">[</span>df2<span class="token punctuation">.</span>语文<span class="token operator">&gt;</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="行列转置" tabindex="-1"><a class="header-anchor" href="#行列转置"><span>行列转置</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>T<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对行列的交换，对df2原始二维结构未影响。见下图更好理解（可点击查看大图）：</p><p>转置前</p><p><img src="`+d+'" alt="img"></p><p>转置后</p><p><img src="'+r+'" alt="img"></p><h3 id="⭐-定行列的axis" tabindex="-1"><a class="header-anchor" href="#⭐-定行列的axis"><span>⭐ 定行列的axis</span></a></h3><p>DataFrame相较于Series有了更多列，那么行列在pandas模块中如何实现区分呢？这里就不得不提一下axis这个几乎模块中每个操作或计算函数的均有的属性值，默认均为<code>axis=0</code>（若为0可省略）。</p><p><code>axis=0</code>和<code>axis=index</code>等价，同样<code>axis=1</code>和<code>axis=columns</code>等价。</p><p>如图能更好地让你理解：</p><p><img src="'+k+`" alt="img"></p><p>首先假设values区域数据类型相同均可以比较，当<code>axis=0</code>时，排序函数<code>sort_values()</code>会对此列每一行（逐行）数据之间进行比较，（设升序）在发现第一个值大于第二个值后交换此列中两行的位置，所以最终呈现出来的是列数据的位置改变；同理，当<code>axis=1</code>时，此行的每一列（逐列）数据之间进行比较，最终呈现的结果为行数据的改变。</p><p>同样为操作型函数需要区分的是，当<code>axis=0</code>时，删除函数<code>drop()</code>则是逐行寻找要删除的行数据然后删除，最终呈现是列数据的个数改变；反之，<code>axis=1</code>时删除函数则是逐列寻找要删除的列数据然后删除，最终呈现为行数据个数的改变。类似的，还有分组函数<code>groupby()</code>是沿着图示箭头方向逐行或逐列进行拆分分组。</p><p>假设values区域数据类型均为可计算的类型，计算型函数在<code>axis=0</code>时逐行进行计算结果反映为列的计算，<code>axis=1</code>时逐列进行计算结果反映为行的计算。</p><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">df2_sorted<span class="token operator">=</span>df2<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&quot;班级&quot;</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2_sorted<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>ascending属性值True为升序（默认），False为降序。</p><p>有时选择最高或最低的数据值时会采用<strong>先排序后切片</strong>的思路，如现需要列的最高的数据值会使列数据降序排序后使用[0]选取此列的第一个数据即为最高的数据值，代码实现见下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">df2_sorted<span class="token operator">=</span>df2<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&quot;班级&quot;</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token comment">#注意因为使用后文的[0]需要对索引进行刷新——使用ignore_index属性来实现</span></span>
<span class="line">output<span class="token operator">=</span>df2_sorted<span class="token punctuation">[</span><span class="token string">&quot;班级&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2_sorted<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组"><span>分组</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">df2_group<span class="token operator">=</span>df2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&quot;班级&quot;</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2_group<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>as_index属性值True为作为索引（默认），反之为False时不作为索引。若例中改为<code>as_index=True</code>，当作为索引后就无法使用原来columns的索引(<code>df2_group.班级</code>)访问，而应为<code>df2_group.index</code>。</p><p>分组函数单纯处理不会有什么作用，也没有输出。所以一般与其他函数配合使用。</p><h3 id="计算" tabindex="-1"><a class="header-anchor" href="#计算"><span>计算</span></a></h3><table><thead><tr><th>函数名</th><th>功能解释</th></tr></thead><tbody><tr><td><code>count()</code></td><td>返回非空(空数据项表示为NaN)数据项数量</td></tr><tr><td><code>sum()</code></td><td>求一列之和</td></tr><tr><td><code>mean()</code></td><td>求一列的平均值</td></tr><tr><td><code>max() / min()</code></td><td>求一列的最大值/最小值</td></tr><tr><td><code>median()</code></td><td>求一列的中位数</td></tr><tr><td><code>std()</code></td><td>求一列的标准差</td></tr></tbody></table><p>常用计算型函数，常见属性为axis（功能解释中均默认<code>axis=0</code>）</p><p>还有个聚合了上表一些功能的<code>describe()</code>函数，故名思意其能返回各列基本描述统计值，包含计数、平均数、标准差、最大值、最小值及 4分位差（其数值越小，说明中间的数据越集中；其数值越大，说明中间的数据越分散。）</p><p>分组加计算的应用实例 - 计算每班的语文平均分</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">df2_yuwen<span class="token operator">=</span>df2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&quot;班级&quot;</span><span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>语文<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2_yuwen<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">df2_delete<span class="token operator">=</span>df2<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df2_delete<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>例中为删除index为6的行数据（默认<code>axis=0</code>省略）。但是值得注意的是，当我们此时再运行<code>print(df2)</code>会发现df2的数据并没有被更改，而是存到了新的df2_delete这个DataFrame对象中。同样有如此情况的还有<code>append()</code>追加这一函数。如何让这种函数直接更改原数据的值呢？这就需要指定属性<code>inplace=True</code>了（此参数默认为False，即不更改原数据）</p><h3 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作"><span>其他操作</span></a></h3><p>此处会列出考试中常见的代码，会慢慢补充</p><h4 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h4><table><thead><tr><th>函数名</th><th>功能解释</th></tr></thead><tbody><tr><td><code>read_excel()</code></td><td>引入Excel文件（*.xlsx）中的数据为DataFrame对象</td></tr><tr><td><code>read_csv()</code></td><td>引入CSV文件（*.csv）中的数据为DataFrame对象</td></tr></tbody></table><p>很多情况下，自己编写代码本句报错多为搞不清文件路径为相对路径还是绝对路径（考试一般不考这个）</p><h4 id="删除异常" tabindex="-1"><a class="header-anchor" href="#删除异常"><span>删除异常</span></a></h4><table><thead><tr><th>函数名</th><th>功能解释</th></tr></thead><tbody><tr><td><code>dropna()</code></td><td>删除空值</td></tr><tr><td><code>duplicates()</code></td><td>删除重复项</td></tr></tbody></table>`,103);function q(x,f){const a=o("ExternalLinkIcon");return l(),c("div",null,[m,s("p",null,[n("【官方网站下载】"),s("a",g,[n("https://www.anaconda.com/download"),t(a)])]),s("p",null,[v,n(" —— 一个Python包管理器，你可以使用它从 "),s("a",b,[n("pypi.org"),t(a)]),n(" 安装包 不过在此之前需要先换个源让我们下载速度更快")]),y])}const w=p(h,[["render",q],["__file","dap-pandas.html.vue"]]),j=JSON.parse('{"path":"/blogs/jishuxuexi/dap-pandas.html","title":"Python数据分析 Ⅰ：pandas模块","lang":"en-US","frontmatter":{"title":"Python数据分析 Ⅰ：pandas模块","date":"2023/6/7","tags":["Python"],"categories":["技术学习"]},"headers":[{"level":2,"title":"与Excel处理区别","slug":"与excel处理区别","link":"#与excel处理区别","children":[]},{"level":2,"title":"数据维度区分","slug":"数据维度区分","link":"#数据维度区分","children":[]},{"level":2,"title":"模块安装与引入","slug":"模块安装与引入","link":"#模块安装与引入","children":[]},{"level":2,"title":"Series数据结构","slug":"series数据结构","link":"#series数据结构","children":[{"level":3,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":3,"title":"访问","slug":"访问","link":"#访问","children":[]},{"level":3,"title":"筛选","slug":"筛选","link":"#筛选","children":[]}]},{"level":2,"title":"DataFrame数据结构","slug":"dataframe数据结构","link":"#dataframe数据结构","children":[{"level":3,"title":"创建","slug":"创建-1","link":"#创建-1","children":[]},{"level":3,"title":"访问","slug":"访问-1","link":"#访问-1","children":[]},{"level":3,"title":"筛选","slug":"筛选-1","link":"#筛选-1","children":[]},{"level":3,"title":"行列转置","slug":"行列转置","link":"#行列转置","children":[]},{"level":3,"title":"⭐ 定行列的axis","slug":"⭐-定行列的axis","link":"#⭐-定行列的axis","children":[]},{"level":3,"title":"排序","slug":"排序","link":"#排序","children":[]},{"level":3,"title":"分组","slug":"分组","link":"#分组","children":[]},{"level":3,"title":"计算","slug":"计算","link":"#计算","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":3,"title":"其他操作","slug":"其他操作","link":"#其他操作","children":[]}]}],"git":{"createdTime":1724401054000,"updatedTime":1724401054000,"contributors":[{"name":"NibblesProject","email":"me@nibbles.cn","commits":1}]},"filePathRelative":"blogs/技术学习/dap-pandas.md"}');export{w as comp,j as data};
