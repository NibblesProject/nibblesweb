import{_ as n,r as l,o,c as i,b as a,d as s,e as c,a as t}from"./app-D4ksCkgp.js";const p="/uploads/2024/07/2024070812494711.jpg",d="/uploads/2024/07/2024070812523578.jpg",r="/uploads/2024/07/2024070814124741.png",u="/uploads/2024/07/2024070814063589.png",m="/uploads/2024/07/2024070814111993.gif",v={},h={href:"https://www.bilibili.com/video/BV1fh411y7R8",target:"_blank",rel:"noopener noreferrer"},g=t('<p>本文就只列了一些课程重点和我踩过的一堆坑，新手学Java，我们相互学习交流。</p><h2 id="java的跨平台性" tabindex="-1"><a class="header-anchor" href="#java的跨平台性"><span>Java的跨平台性</span></a></h2><p><img src="'+p+'" alt="img"></p><h3 id="核心机制-jvm" tabindex="-1"><a class="header-anchor" href="#核心机制-jvm"><span>核心机制（JVM）：</span></a></h3><p>1）JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令管理数据、内存、寄存器，包含在JDK中。 2）对于不同的平台，有不同的虚拟机。 3）Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”（跨平台）。</p><h2 id="编译和运行流程" tabindex="-1"><a class="header-anchor" href="#编译和运行流程"><span>编译和运行流程：</span></a></h2><p><img src="'+d+`" alt="img"></p><p>注意命令！<code>**javac**</code>是编译，<code>**java**</code>才是运行。<code>*.java</code>为源文件，<code>*.class</code>为字节码文件。</p><p>若程序无错是无任何提示，默默地在同目录下生成字节码文件。但是有错会报错在cmd，无法编译。</p><p>运行的本质是把字节码文件装载到JVM虚拟机内执行。</p><p>修改后的源文件需要重新编译，才能在再执行中生效。（并非前端的所改即得）</p><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World！</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>细节，注意！有的是真实踩过的坑，有的是老师的提醒。</p><ul><li><code>print</code>后面的字母是<strong>小写的L</strong>，即<code>l</code>。意为**&quot;<code>line</code>&quot;（行），在输出之后会自动添加一个换行符（<code>\\n</code>）**。若不慎打成了<code>printIn</code>则会报错提示找不到这个方法。<strong>Java语言严格区分大小写</strong> 有关打印到屏幕上的方法就<code>System.out.println()</code>和<code>System.out.print()</code></li><li><code>main()</code>和<code>{}</code>间的空格是为了<strong>编程规范</strong>，程序能跑，但适当的空格有利于协作者的阅读。</li><li>但是Java应用程序的执行入口是<code>main()</code>方法。 它有固定的书写格式<code>public static void main(String[] args)(…)</code></li><li>每条花括号内的语句的后面要以<code>;</code>分号结束，凡是括号都是成对出现的。</li><li>public class后的<strong>类名要和文件名保持一致</strong>（因为Java类 <code>Hello</code> 被声明为 <code>public</code>）</li><li>注意在编译时cmd窗口的代码页编码和代码编辑器中显示的文件编码是否相同（以下<img src="`+r+'" alt="img">可展开)</li><li>若输出内容包含中文，务必要<strong>设置中文编码<code>GBK</code>或<code>UTF-8</code></strong></li></ul><details class="wp-block-details"><summary>如何查看cmd窗口的代码页编码？</summary><p>右键cmd窗口标题栏，属性→当前代码页</p><figure class="wp-block-image size-full"><img src="'+u+'" alt="" class="wp-image-575"></figure><p>不推荐更改代码页编码，其更改注册表比较繁琐。文件转编码其实更快。</p></details><details class="wp-block-details"><summary>如何按指定编码保存？</summary><p>以VSCode编辑器为例，</p><figure class="wp-block-image size-full"><img src="'+m+`" alt="" class="wp-image-576"></figure></details><p>执行命令依次为</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">javac Hello.java</span>
<span class="line"><span class="token function">java</span> Hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意后面的指令不用带.class后缀，因为类的名字就是<code>Hello</code></p><h2 id="其他tips" tabindex="-1"><a class="header-anchor" href="#其他tips"><span>其他Tips</span></a></h2><ul><li>编译后，源文件中每一个类都会对应每一个字节码文件，对应依据就是同名</li><li>【再提一下】如果源文件包含一个<code>public</code>类则文件名必须按该类名命名！</li><li>一个源文件中最多只能有一个<code>public</code>类。其它类的个数不限。也可以将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public的main方法。main可以在不同类中。</li></ul>`,22);function b(k,_){const e=l("ExternalLinkIcon");return o(),i("div",null,[a("blockquote",null,[a("p",null,[s("课程链接"),a("a",h,[s("https://www.bilibili.com/video/BV1fh411y7R8"),c(e)]),s(" （不是推广，只是优秀的课程应该被广泛传播。）")])]),g])}const f=n(v,[["render",b],["__file","java-helloworld.html.vue"]]),w=JSON.parse('{"path":"/blogs/jishuxuexi/java-helloworld.html","title":"Java上的HelloWorld，怎么这么多细节？","lang":"en-US","frontmatter":{"title":"Java上的HelloWorld，怎么这么多细节？","date":"2024/8/7","tags":["Java"],"categories":["技术学习"]},"headers":[{"level":2,"title":"Java的跨平台性","slug":"java的跨平台性","link":"#java的跨平台性","children":[{"level":3,"title":"核心机制（JVM）：","slug":"核心机制-jvm","link":"#核心机制-jvm","children":[]}]},{"level":2,"title":"编译和运行流程：","slug":"编译和运行流程","link":"#编译和运行流程","children":[]},{"level":2,"title":"Hello World！","slug":"hello-world","link":"#hello-world","children":[]},{"level":2,"title":"其他Tips","slug":"其他tips","link":"#其他tips","children":[]}],"git":{"createdTime":1724401054000,"updatedTime":1724401054000,"contributors":[{"name":"NibblesProject","email":"me@nibbles.cn","commits":1}]},"filePathRelative":"blogs/技术学习/java-helloworld.md"}');export{f as comp,w as data};
